package com.gman.modeler.gui.components.types;

import com.gman.modeler.api.QueueSelector;
import com.gman.modeler.api.RequestType;
import com.gman.modeler.api.Timer;
import com.gman.modeler.gui.ComponentsFactory;
import com.gman.modeler.gui.api.DataCreator;
import com.gman.modeler.gui.api.DataMediator;

/**
 * @author gman
 */
public class RequestTypeCreator extends DataCreator<RequestType> {

    private final DataMediator mediator;
    private final ComponentsFactory factory;

    /**
     * Creates new form RequestTypeCreator
     */
    public RequestTypeCreator(DataMediator mediator) {
        this.mediator = mediator;
        this.factory = new ComponentsFactory(null);
        initComponents();
    }

    @Override
    public void reset() {
        updateName(null);
        updateQueueSelector(null);
        updateIncomeTimer(null);
        updateProcessingTimer(null);
        updateAbortTimer(null);
    }

    @Override
    public void parse(RequestType obj) {
        updateName(obj.getName());
        updateQueueSelector(obj.getQueueSelector());
        updateIncomeTimer(obj.getIncomeInterval());
        updateProcessingTimer(obj.getProcessingInterval());
        updateAbortTimer(obj.getAbortInterval());
    }

    private void updateName(String name) {
        if (name != null && !name.isEmpty()) {
            nameTextField.setText(name);
        } else {
            nameTextField.setText("");
        }
    }

    private void updateQueueSelector(QueueSelector queueSelector) {
        this.queueSelector = queueSelector;
        if (queueSelector != null) {
            queueButton.setText(queueSelector.getClass().getSimpleName());
        } else {
            queueButton.setText("not set");
        }
    }

    private void updateIncomeTimer(Timer incomeTimer) {
        this.incomeTimer = incomeTimer;
        if (incomeTimer != null) {
            incomeButton.setText(incomeTimer.toString());
        } else {
            incomeButton.setText("not set");
        }
    }

    private void updateProcessingTimer(Timer processingTimer) {
        this.processingTimer = processingTimer;
        if (processingTimer != null) {
            processingButton.setText(processingTimer.toString());
        } else {
            processingButton.setText("not set");
        }
    }

    private void updateAbortTimer(Timer abortTimer) {
        this.abortTimer = abortTimer;
        if (abortTimer != null) {
            abortButton.setText(abortTimer.toString());
        } else {
            abortButton.setText("not set");
        }
    }

    @Override
    public RequestType create() {
        if (!nameTextField.getText().isEmpty() &&
                queueSelector != null &&
                incomeTimer != null &&
                processingTimer != null &&
                abortTimer != null) {
            final RequestType rt = new RequestType();
            rt.setName(nameTextField.getText());
            rt.setQueueSelector(queueSelector);
            rt.setIncomeInterval(incomeTimer);
            rt.setProcessingInterval(processingTimer);
            rt.setAbortInterval(abortTimer);
            return rt;
        } else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        queueLabel = new javax.swing.JLabel();
        queueButton = new javax.swing.JButton();
        incomeLabel = new javax.swing.JLabel();
        incomeButton = new javax.swing.JButton();
        processingLabel = new javax.swing.JLabel();
        processingButton = new javax.swing.JButton();
        abortLabel = new javax.swing.JLabel();
        abortButton = new javax.swing.JButton();

        setLayout(new java.awt.GridLayout(5, 2, 1, 1));

        nameLabel.setText("Name");
        add(nameLabel);
        add(nameTextField);

        queueLabel.setText("Queue selector");
        add(queueLabel);

        queueButton.setText("not set");
        queueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueButtonActionPerformed(evt);
            }
        });
        add(queueButton);

        incomeLabel.setText("Income timer");
        add(incomeLabel);

        incomeButton.setText("not set");
        incomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incomeButtonActionPerformed(evt);
            }
        });
        add(incomeButton);

        processingLabel.setText("Processing timer");
        add(processingLabel);

        processingButton.setText("not set");
        processingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processingButtonActionPerformed(evt);
            }
        });
        add(processingButton);

        abortLabel.setText("Abort timer");
        add(abortLabel);

        abortButton.setText("not set");
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });
        add(abortButton);
    }// </editor-fold>//GEN-END:initComponents

    private void queueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueButtonActionPerformed
        updateQueueSelector(factory.showDialogFor(QueueSelector.class, mediator, queueSelector));

    }//GEN-LAST:event_queueButtonActionPerformed

    private void incomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incomeButtonActionPerformed
        updateIncomeTimer(factory.showDialogFor(Timer.class, mediator, incomeTimer));

    }//GEN-LAST:event_incomeButtonActionPerformed

    private void processingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processingButtonActionPerformed
        updateProcessingTimer(factory.showDialogFor(Timer.class, mediator, processingTimer));

    }//GEN-LAST:event_processingButtonActionPerformed

    private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
        updateAbortTimer(factory.showDialogFor(Timer.class, mediator, abortTimer));
    }//GEN-LAST:event_abortButtonActionPerformed

    private QueueSelector queueSelector = null;
    private Timer incomeTimer = null;
    private Timer processingTimer = null;
    private Timer abortTimer = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JLabel abortLabel;
    private javax.swing.JButton incomeButton;
    private javax.swing.JLabel incomeLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton processingButton;
    private javax.swing.JLabel processingLabel;
    private javax.swing.JButton queueButton;
    private javax.swing.JLabel queueLabel;
    // End of variables declaration//GEN-END:variables
}
