package com.gman.modeler.gui.components;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;

import com.gman.modeler.api.Modeler;
import com.gman.modeler.gui.api.DataListener;

/**
 * @author gman
 */
public class ServiceViewerComponent extends DataListener {

    private static final int INDEX_WIDTH = 25;
    private static final int NAME_WIDTH = 200;
    private static final int TYPE_WIDTH = 100;
    private static final int INCOME_WIDTH = 175;
    private static final int OUTCOME_WIDTH = 1000;

    private Modeler modeler;
    private final ServiceTableModel tableModel;

    /**
     * Creates new form ServiceEditorComponent
     */
    public ServiceViewerComponent() {
        tableModel = new ServiceTableModel();
        initComponents();
        servicesTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        servicesTable.getColumnModel().getColumn(0).setPreferredWidth(INDEX_WIDTH);
        servicesTable.getColumnModel().getColumn(1).setPreferredWidth(NAME_WIDTH);
        servicesTable.getColumnModel().getColumn(2).setPreferredWidth(TYPE_WIDTH);
        servicesTable.getColumnModel().getColumn(3).setPreferredWidth(INCOME_WIDTH);
        servicesTable.getColumnModel().getColumn(4).setPreferredWidth(OUTCOME_WIDTH);
    }

    @Override
    public String getComponentName() {
        return "Services";
    }

    @Override
    public void setModeler(Modeler modeler) {
        this.modeler = modeler;
        this.tableModel.update();
    }

    private class ServiceTableModel extends AbstractTableModel {

        public void update() {
            fireTableDataChanged();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public int getRowCount() {
            return modeler != null ? modeler.getServices().size() : 0;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "i";
                case 1:
                    return "name";
                case 2:
                    return "type";
                case 3:
                    return "income";
                default:
                    return "outcome";
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return rowIndex;
                case 1:
                    return modeler.getServices().get(rowIndex).getName();
                case 2:
                    return modeler.getServices().get(rowIndex).getClass().getSimpleName();
                case 3:
                    return modeler.getServices().get(rowIndex).getIncome();
                default:
                    return modeler.getServices().get(rowIndex).getOutcome();
            }
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        servicesScrollPane = new javax.swing.JScrollPane();
        servicesTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        servicesTable.setModel(tableModel);
        servicesScrollPane.setViewportView(servicesTable);

        add(servicesScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane servicesScrollPane;
    private javax.swing.JTable servicesTable;
    // End of variables declaration//GEN-END:variables
}
