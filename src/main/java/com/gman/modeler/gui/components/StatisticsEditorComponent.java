/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gman.modeler.gui.components;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import com.gman.modeler.api.Modeler;
import com.gman.modeler.api.StatisticAggregator;
import com.gman.modeler.gui.ComponentsFactory;
import com.gman.modeler.gui.api.DataModifier;
import com.gman.modeler.gui.components.util.JButtonCellRenderer;

/**
 * @author gman
 */
public class StatisticsEditorComponent extends DataModifier {

    private static final int INDEX_WIDTH = 25;
    private static final int NAME_WIDTH = 200;
    private static final int VALUE_WIDTH = 100;
    private static final int CONTROL_WIDTH = 60;

    private final ComponentsFactory factory;
    private final StatisticsTableModel tableModel;
    private final List<StatisticAggregator> aggregators = new ArrayList<>();

    /**
     * Creates new form StatisticsEditorComponent
     */
    public StatisticsEditorComponent() {
        factory = new ComponentsFactory(null);
        tableModel = new StatisticsTableModel();

        initComponents();

        statisticsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        statisticsTable.getColumnModel().getColumn(0).setPreferredWidth(INDEX_WIDTH);
        statisticsTable.getColumnModel().getColumn(1).setPreferredWidth(NAME_WIDTH);
        statisticsTable.getColumnModel().getColumn(2).setPreferredWidth(VALUE_WIDTH);
        statisticsTable.getColumnModel().getColumn(3).setPreferredWidth(CONTROL_WIDTH);

        statisticsTable.getColumnModel().getColumn(3).setCellRenderer(new JButtonCellRenderer("del"));

        statisticsTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                final int column = statisticsTable.getColumnModel().getColumnIndexAtX(e.getX());
                final int row = e.getY() / statisticsTable.getRowHeight();
                switch (column) {
                    case 3: {
                        final Modeler modeler = getMediator().getModeler();
                        modeler.getStatistics().remove(row);
                        getMediator().updateModeler(modeler);
                    }
                    break;
                }
            }
        });
    }

    @Override
    public void setModeler(Modeler modeler) {
        aggregators.clear();
        aggregators.addAll(modeler.getStatistics());
        tableModel.update();
    }

    @Override
    public String getComponentName() {
        return "Statistics";
    }

    private class StatisticsTableModel extends AbstractTableModel {

        public void update() {
            fireTableDataChanged();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public int getRowCount() {
            return aggregators.size();
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "i";
                case 1:
                    return "name";
                case 2:
                    return "records";
                default:
                    return "del";
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return rowIndex;
                case 1:
                    return aggregators.get(rowIndex).getStatisticsName();
                case 2:
                    return aggregators.get(rowIndex).getRecordsNumber();
                default:
                    return "del";
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statisticsScrollPane = new javax.swing.JScrollPane();
        statisticsTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        statisticsTable.setModel(tableModel);
        statisticsScrollPane.setViewportView(statisticsTable);

        add(statisticsScrollPane, java.awt.BorderLayout.CENTER);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        final StatisticAggregator aggregator = factory.showDialogFor(StatisticAggregator.class, getMediator());
        if (aggregator != null) {
            final Modeler modeler = getMediator().getModeler();
            modeler.getStatistics().add(aggregator);
            getMediator().updateModeler(modeler);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane statisticsScrollPane;
    private javax.swing.JTable statisticsTable;
    // End of variables declaration//GEN-END:variables
}
