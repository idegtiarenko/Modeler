/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gman.modeler.gui.components.util;

import javax.swing.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.gman.modeler.api.RequestType;
import com.gman.modeler.api.Timer;
import com.gman.modeler.gui.ComponentsFactory;
import com.gman.modeler.gui.api.DataMediator;
import com.gman.modeler.services.AbstractService;

/**
 * @author gman
 */
public class RequestTypeTimerEditor extends javax.swing.JPanel {

    /**
     * Creates new form RequestTypeTimerEditor
     */
    public RequestTypeTimerEditor(DataMediator mediator) {
        this.mediator = mediator;
        this.factory = new ComponentsFactory(null);
        this.model = new RequestTypeTimerListModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timersScrollPane = new javax.swing.JScrollPane();
        timersList = new javax.swing.JList();
        buttonsPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        timersList.setModel(model);
        timersScrollPane.setViewportView(timersList);

        add(timersScrollPane, java.awt.BorderLayout.CENTER);

        buttonsPanel.setLayout(new java.awt.GridLayout(1, 2));

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(addButton);

        removeButton.setText("-");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(removeButton);

        add(buttonsPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        final List<RequestType> types = mediator.getModeler().getTypes();

        final RequestType type = (RequestType) JOptionPane.showInputDialog(this, "Type:", "Enter type",
                JOptionPane.QUESTION_MESSAGE,
                null, types.toArray(new Object[types.size()]), null);
        if (type != null) {
            final Timer timer = factory.showDialogFor(Timer.class, mediator);
            if (timer != null) {
                model.add(type, timer);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (timersList.getSelectedIndex() != -1) {
            model.remove(timersList.getSelectedIndex());
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    public void reset() {
        model.clear();
    }

    public void parse(AbstractService obj) {
        model.fromMap(obj.getTimers());
    }

    public Map<RequestType, Timer> create() {
        return model.toMap();
    }

    private static class RequestTypeTimerListModel extends AbstractListModel<String> {

        private final List<Map.Entry<RequestType, Timer>> pairs = new ArrayList<>();

        public void add(RequestType type, Timer timer) {
            pairs.add(new Pair(type, timer));
            fireContentsChanged(this, 0, Integer.MAX_VALUE);
        }

        public void remove(int index) {
            pairs.remove(index);
            fireContentsChanged(this, 0, Integer.MAX_VALUE);
        }

        public void clear() {
            pairs.clear();
            fireContentsChanged(this, 0, Integer.MAX_VALUE);
        }

        public void fromMap(Map<RequestType, Timer> map) {
            pairs.clear();
            for (final Map.Entry<RequestType, Timer> entry : map.entrySet()) {
                pairs.add(entry);
            }
            fireContentsChanged(this, 0, Integer.MAX_VALUE);
        }

        public Map<RequestType, Timer> toMap() {
            final Map<RequestType, Timer> map = new HashMap<>();
            for (final Map.Entry<RequestType, Timer> entry : pairs) {
                map.put(entry.getKey(), entry.getValue());
            }
            return map;
        }

        @Override
        public int getSize() {
            return pairs.size();
        }

        @Override
        public String getElementAt(int index) {
            return pairs.get(index).toString();
        }

        public static class Pair implements Map.Entry<RequestType, Timer> {

            private final RequestType type;
            private final Timer timer;

            public Pair(RequestType type, Timer timer) {
                this.type = type;
                this.timer = timer;
            }

            @Override
            public RequestType getKey() {
                return type;
            }

            @Override
            public Timer getValue() {
                return timer;
            }

            @Override
            public Timer setValue(Timer value) {
                throw new UnsupportedOperationException();
            }

            @Override
            public String toString() {
                return new StringBuilder().
                        append(type).
                        append(" - ").
                        append(timer).toString();
            }
        }
    }

    private final DataMediator mediator;
    private final ComponentsFactory factory;
    private final RequestTypeTimerListModel model;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JList timersList;
    private javax.swing.JScrollPane timersScrollPane;
    // End of variables declaration//GEN-END:variables
}
