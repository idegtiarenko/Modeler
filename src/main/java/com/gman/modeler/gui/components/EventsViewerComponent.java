package com.gman.modeler.gui.components;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

import com.gman.modeler.api.Modeler;
import com.gman.modeler.api.RequestEvent;
import com.gman.modeler.api.TimeUtils;
import com.gman.modeler.gui.api.DataListener;

/**
 * @author gman
 */
public class EventsViewerComponent extends DataListener {

    private static final int INDEX_WIDTH = 25;
    private static final int TYPE_WIDTH = 250;
    private static final int TIME_WIDTH = 150;

    /**
     * Creates new form EventsVieverComponent
     */
    public EventsViewerComponent() {
        tableModel = new EventsViewerTableModel();
        initComponents();
        eventsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        eventsTable.getColumnModel().getColumn(0).setPreferredWidth(INDEX_WIDTH);
        eventsTable.getColumnModel().getColumn(1).setPreferredWidth(TYPE_WIDTH);
        eventsTable.getColumnModel().getColumn(2).setPreferredWidth(TIME_WIDTH);
    }

    @Override
    public void setModeler(Modeler modeler) {
        tableModel.setData(modeler);
        ((SpinnerNumberModel) requestSpinner.getModel()).
                setMaximum(modeler.getGeneratedRequests().size() - 1);
    }

    @Override
    public String getComponentName() {
        return "Events viewer";
    }

    private final EventsViewerTableModel tableModel;

    private static class EventsViewerTableModel extends AbstractTableModel {

        private Modeler modeler;
        private final List<RequestEvent> events = new ArrayList<>();

        public void setData(Modeler modeler) {
            events.clear();
            this.modeler = modeler;
            fireTableDataChanged();
        }

        public void setEventIndex(int index) {
            events.clear();
            if (!modeler.getGeneratedRequests().isEmpty()) {
                events.addAll(modeler.getGeneratedRequests().get(index).getEvents());
            }
            fireTableDataChanged();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public int getRowCount() {
            return events.size();
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "i";
                case 1:
                    return "type";
                default:
                    return "time";
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return rowIndex;
                case 1:
                    return events.get(rowIndex).getModelingEventType();
                default:
                    return TimeUtils.timeString(events.get(rowIndex).getTime());
            }
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventsScrollPane = new JScrollPane();
        eventsTable = new JTable();
        propPanel = new JPanel();
        requestSpinner = new JSpinner();
        requestLabel = new JLabel();

        setLayout(new BorderLayout());

        eventsTable.setModel(tableModel);
        eventsScrollPane.setViewportView(eventsTable);

        add(eventsScrollPane, BorderLayout.CENTER);

        propPanel.setLayout(new BorderLayout());

        requestSpinner.setModel(new SpinnerNumberModel(0, 0, 0, 1));
        requestSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                requestSpinnerStateChanged(evt);
            }
        });
        propPanel.add(requestSpinner, BorderLayout.CENTER);

        requestLabel.setText("Request:");
        propPanel.add(requestLabel, BorderLayout.LINE_START);

        add(propPanel, BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void requestSpinnerStateChanged(ChangeEvent evt) {//GEN-FIRST:event_requestSpinnerStateChanged
        tableModel.setEventIndex((Integer) requestSpinner.getValue());
    }//GEN-LAST:event_requestSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane eventsScrollPane;
    private JTable eventsTable;
    private JPanel propPanel;
    private JLabel requestLabel;
    private JSpinner requestSpinner;
    // End of variables declaration//GEN-END:variables
}
